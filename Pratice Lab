#include<stdio.h>
#include<stdlib.h>

struct node
{
    int info;
    struct node *link;
};


typedef struct node *NODE;

NODE getnode()
{
    NODE x;
    x = (NODE)malloc(sizeof(struct node));
    if(x==NULL)
    {
        printf("NO Memory available\n");
        exit(0);
    }
    return x;
}

void freenode(NODE x)
{
    free(x);
}


NODE insert(NODE first,int item)
{
    NODE temp;
    temp=getnode();
    temp->info=item;
    temp->link=NULL;
    if(first==NULL)
        return temp;
    temp->link=first;
    first=temp;
    return first;
}

NODE delete(NODE head, int value)
{
    NODE cur =head,prev =NULL;
    if(head==NULL)
    {
        return NULL;
    }
    if(head->info==value)
    {
        freenode(head);
        return NULL;
    }
    while(cur->info!=value)
    {
        prev = cur;
        cur = cur->link;
    }

    prev->link =cur->link;
    freenode(cur);
    return head;
}

void display(NODE first)
{
    NODE temp;
    if(first==NULL)
        printf("list empty cannot display items\n");
    for(temp=first;temp!=NULL;temp=temp->link)
    {
        printf("%d\n",temp->info);
    }
}

void remove_duplicate(NODE head1,NODE head2)
{
    NODE temp1=head1, temp2 =head2;

    if(head1==NULL || head2==NULL)
    {
        return;
    }
    while(temp1!=NULL)
    {
        while(temp2!=NULL)
        {
            if(temp1->info == temp2->info)
            {
                head2 = delete(head2,temp2->info);
            }
            temp2 = temp2->link;
        }
        temp1 =temp1->link;
        temp2 =head2;
    }
}
int main()
{
    int num1,num2,item;
    NODE head1=NULL,head2=NULL;

    printf("Enter the number of nodes in l\n");
    scanf("%d",&num1);
    for(int i=0;i<num1;i++)
    {
        printf("Enter the item %d\n",(i+1));
        scanf("%d",&item);
        head1 = insert(head1,item);
    }
    
    printf("Enter the number of nodes in 2\n");
    scanf("%d",&num2);
    for(int i=0;i<num2;i++)
    {
        printf("Enter the item %d\n",(i+1));
        scanf("%d",&item);
        head2 =insert(head2,item);
    }

    printf("List 1\n");
    display(head1);
    printf("List 2\n");
    display(head2);

    remove_duplicate(head1,head2);

    printf("List 1\n");
    display(head1);
    printf("List 2\n");
    display(head2);
    
}
